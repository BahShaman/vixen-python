#PyGameChannelDisplay
import pygame
import os
import time

BLACK    = (   0,   0,   0)
WHITE    = ( 255, 255, 255)
GREEN    = (   0, 255,   0)
RED      = ( 255,   0,   0)
UNK      = ( 255, 255,   0)
BLUE     = ( 0,   0,   255)

file = 'C:/Users/BOSCIA/Documents/Projects/VixenDecode/03 - This Is Halloween.ogg'
print os.path.exists(file);
print file
pygame.font.init()
pygame.mixer.init()
pygame.mixer.music.load(file)

datastr = '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'
data = datastr.decode('base64')
box_width = 50
box_gap   = 20
box_off   = 50
num = 6
count = 0
millis = 100
#Opening and setting the window size
size = (box_off*2+(num*(box_gap+box_width)), box_off*2+box_width)
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Channel Display")
done = False
clock = pygame.time.Clock()
secs = millis/float(1000)
offset = 0
mfont = pygame.font.SysFont('freesansbold', 25)
periods = len(data)/num
print "%s channels, %s periods" % (str(num),str(periods))

seq = [ data[start:start+periods] for start in range(0, len(data), periods) ]
pygame.mixer.music.play(0)
print [ord(x) for x in seq[0][0]]
loop_tick_init = pygame.time.get_ticks()
loop_ticks = loop_tick_init
while not done:
	# --- Main event loop
	for event in pygame.event.get(): # User did something
		if event.type == pygame.QUIT: # If user clicked close
			done = True # Flag that we are done so we exit this loop
		if event.type == pygame.KEYDOWN: # If user clicked close
			if event.key == pygame.K_UP: # If user clicked close
				offset += 100 # Flag that we are done so we exit this loop=
			if event.key == pygame.K_DOWN: # If user clicked close
				offset -= 100 # Flag that we are done so we exit this loop
			if event.key == pygame.K_LEFT: # If user clicked close
				offset = 0 # Flag that we are done so we exit this loop
			
	if count >= len(seq):
		pygame.time.wait(10000)
		done = True
		break

	# --- Game logic should go here
	count += 1
	per = count

	# --- Drawing code should go here
 
	# First, clear the screen to white. Don't put other drawing commands
	# above this, or they will be erased with this command.
	screen.fill(BLACK)
	label = mfont.render("Offset: "+str(offset), True, (100,100,100))
	screen.blit(label, (100, 100))

	for ch in seq:
		value = ord(ch[per])
		print '{:0>3d}'.format(ord(ch[per])),
		box_on = False
		if value > 1:
			box_on = True
		lef = box_off + *(box_gap + box_width)
		top = box_off
		wid = box_width
		hgt = box_width
		#print "[%d,%d,%d,%d] " % (lef,top,wid,hgt)
		r = value
		g = value*(255/255.0)
		b = 0
		print "color: (%d,%d,%d)" % (r,g,b),
		if box_on == True:
			pygame.draw.rect(screen, (r, g, b), [lef,top,wid,hgt], 0)
	print 'count: %s' % str(count), \
			'ticks: %s' % str(count * millis), \
			'pos: %d' % pygame.mixer.music.get_pos(), \
			'diff: %s' % str(pygame.mixer.music.get_pos() - (count * millis))
		

	print "---"
	#pygame.draw.rect(screen, BLUE , [10,10,20,20], 1)
	#pygame.draw.rect(screen, BLACK, [30,10,20,20], 1)
	#pygame.draw.rect(screen, UNK  , [50,10,20,20], 1)
	#pygame.draw.rect(screen, GREEN, [70,10,20,20], 1)
	
	# --- Limit to 100 millisecond periods frames per second
	mticks = pygame.mixer.music.get_pos()
	calc_mticks = count * millis
	print 'timing:', mticks, calc_mticks
	
	while pygame.mixer.music.get_pos() < count * millis + offset:
		pass
		#print loop_ticks, pygame.time.get_ticks()
	
 
	# --- Go ahead and update the screen with what we've drawn.
	pygame.display.flip()
	loop_ticks = pygame.time.get_ticks()
 
